AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  LambdasBucketName:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'
  
  LambdaZipVersionId1:
    Type: String
    Description: 'First lambda zip file S3 VersionId'
  LambdaZipVersionId2:
    Type: String
    Description: 'Second lambda zip file S3 VersionId'
  LambdaZipVersionId3:
    Type: String
    Description: 'Third lambda zip file S3 VersionId'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  
  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'

  
Resources:

  ApiKeyAuthorizerLambda:
    Type: AWS::Lambda::Function
    DependsOn: ApiKeyAuthorizerLambdaPolicy
    Properties:
      FunctionName: !Sub '${ProjectName}-apikeyAuthorizerLambda'
      Runtime: nodejs14.x
      Handler: 'index.handler'
      Code: 
        S3Bucket: !Ref LambdasBucketName
        S3Key: 'pn-auth-fleet/main/apikeyAuthorizer.zip'
        S3ObjectVersion: !Ref LambdaZipVersionId1
      Role: !GetAtt ApiKeyAuthorizerLambdaRole.Arn

  ApiKeyAuthorizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-apikeyAuthorizerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  ApiKeyAuthorizerLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-apikeyAuthorizerLambdaPolicy
      Roles:
        - !Ref ApiKeyAuthorizerLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - '*'
            Resource: "*"
  

  JwtAuthorizerLambda:
    Type: AWS::Lambda::Function
    DependsOn: JwtAuthorizerLambdaPolicy
    Properties:
      FunctionName: !Sub '${ProjectName}-jwtAuthorizerLambda'
      Runtime: nodejs14.x
      Handler: 'index.handler'
      Code: 
        S3Bucket: !Ref LambdasBucketName
        S3Key: 'pn-auth-fleet/main/jwtAuthorizer.zip'
        S3ObjectVersion: !Ref LambdaZipVersionId2
      Role: !GetAtt JwtAuthorizerLambdaRole.Arn

  JwtAuthorizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-jwtAuthorizerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  JwtAuthorizerLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-jwtAuthorizerLambdaPolicy
      Roles:
        - !Ref JwtAuthorizerLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - '*'
            Resource: "*"

