AWSTemplateFormatVersion: 2010-09-09
Description: "Example microservice deploy"

Transform:
  - UpdateDeploymentTransform

Parameters:
  ProjectName:
    Type: String
    Description:
      "Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment"

  LambdasBucketName:
    Type: String
    Description: "The S3 bucket from which to fetch the templates used by this stack."
  WebApiDnsName:
    Type: String
    Description: "DNS custom domain to export token-exchange api"

  BucketBasePath:
    Type: String
    Description: "The S3 bucket base path where lambda functions are stored"

  CognitoUserPoolArn:
    Type: String
    Default: ""
    Description: "Cognito user pool arn"

  CognitoClientId:
    Type: String
    Default: ""
    Description: "Cognito CognitoClientId"

  JwtAuthorizerLambdaEnvironmentCacheTtl:
    Type: String
    Description: Cryptography keys cache entry duration in seconds

  B2BAuthorizerLambdaEnvironmentCacheTtl:
    Type: String
    Default: "300"
    Description: Cryptography keys cache entry duration in seconds

  BackofficeAuthorizerLambdaEnvironmentCacheTtl:
    Type: String
    Default: "120"
    Description: Cryptography keys cache entry duration in seconds
  TokenExchangeLambdaEnvironmentCacheTtl:
    Type: String
    Description: Cryptography keys cache entry duration in seconds
  TokenExchangeLambdaEnvironmentTokenTtl:
    Type: String
    Description: Session token duration (in seconds) for "Piattaforman Notifiche" sessions.
  TokenExchangeLambdaEnvironmentIssuer:
    Type: String
    Description: Session token issuer
  TokenExchangeLambdaEnvironmentAllowedIssuer:
    Type: String
    Description: "Comma separated list of external authentication token issuers
      recognized by Piattaforma Notifiche (SelfCare and SpidHub)"
  TokenExchangeLambdaEnvironmentAllowedOrigin:
    Type: String
    Description: 'Comma separated list of websites allowed to use "Piattaforma
      Notifiche" back-ends API'
  TokenExchangeLambdaEnvironmentAllowedTaxIdsParameter:
    Type: String
    Description: "Parameter of allowed login Tax Ids"
    Default: "/pn-auth-fleet/allowedLoginTaxids"

  TokenExchangeLambdaEnvironmentJwksMapping:
    Type: String
    Description: "Mapping tra issuer e jwks url non standard in formato json"

  TokenExchangeLambdaEnvironmentAcceptedAudience:
    Type: String
    Description: Comma separated list of token audience accepted

  TokenExchangeLambdaEnvironmentAudience:
    Type: String
    Description: Audience value for token generation

  TokenExchangeLatencyLimit:
    Type: Number
    Default: 2000
    Description: Default latency limit for token exchange api

  ApikeyAuthorizerV2PDNDAudience:
    Type: String
    Description: Pdnd Audience for ApikeyAuthorizerV2

  ApikeyAuthorizerV2PDNDIssuer:
    Type: String
    Description: Pdnd Issuer for ApikeyAuthorizerV2

  ConsentTypeEnum:
    Type: String
    Description: enum for consentType check

  ApiKeyAuthorizerV2LambdaEnvironmentCacheTtl:
    Type: String
    Default: 300
    Description: Cryptography keys cache entry duration in seconds

  ApplicationLoadBalancerDomain:
    Type: String
    Description: application loadbalancer used from b2bAuthorizer to call pn-external-registries and pn-user-attributes

  # Unused but required by CD pipeline
  MicroserviceNumber:
    Type: Number
    Description: "Disambiguation useful for load balancer rules"
  # Unused but required by CD pipeline
  TemplateBucketBaseUrl:
    Type: String
    Description: "The S3 bucket from which to fetch the templates used by this stack."

  #SNS Topic Alarm Arn and Name
  AlarmSNSTopicArn:
    Type: String
    Description: "An ARN of an SNS topic where to send alarm when log line includes ERROR or FATAL"

  Version:
    Type: String
    Description: "Keep versioning of commitIds used for cloudformation templates"

  # TODO: deploy lambda into ours VPC
  SubnetsIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "subnets ids comma separated list. Where to deploy the microservice"

  VpcEgressSubnetsIds:
    Type: CommaDelimitedList
    Description: 'VPC subnet with internet access'

  VpcId:
    Type: String
    Description: "VpcId where the microservice is going to be deployed"

  PutIntoVpc:
    Type: String
    Default: "true"

  LogsKinesisSourceStreamArn:
    Type: String
    Description: "Kinesis stream that receive logs"

  # - Log exports parameters
  CloudwatchFilterPattern:
    Default: ""
    Type: String
    Description: filter expression for exported logs

  ApiKeyTablesEncryptKeyId:
    Type: String
    Description: "KMS ID for apikey manager tables"

  PnAuthFleetJwtSignKeyId:
    Type: String
    Description: JWT sign key ID

  ApiKeyAuthorizerV2LambdaName:
    Type: String

  IoAuthorizerLambdaName:
    Type: String

  JwtAuthorizerLambdaName:
    Type: String

  JWKSCacheRefreshLambdaName:
    Type: String

  B2BAuthorizerLambdaName:
    Type: String

  BackofficeAuthorizerLambdaName:
    Type: String

  TokenExchangeLambdaName:
    Type: String

  JwksCacheForceRefreshLambdaName:
    Type: String

  PnRaddBaseliningLambdaName:
    Type: String

  TokenExchangeWafLimit:
    Type: Number
    Default: "600000"

  EnhancedWebSecurityEnabled:
    Type: String
    Default: false
    Description: Enable additional WAF Web rules
    AllowedValues:
      - true
      - false

  JWKSRefreshIntervalMinutes:
    Type: Number
    Default: 0
    Description: "Interval in minutes to refresh JWKS cache. 0 means no refresh"

  JWKSDownloadRetryIntervalMinutes:
    Type: Number
    Default: 2
    Description: "Interval in minutes to retry download JWKS cache"

  AuthJwtIssuersTableName:
    Type: String
    Description: "Name of dynamodb table containing auth jwt issuers data"

  AuthJwtAttributesTableName:
    Type: String
    Description: "Name of dynamodb table containing auth jwt attributes data"

  JWKSCacheBucketName:
    Type: String
    Description: "Name of S3 bucket containing JWKS data"

  AuthJwtIssuersTableArn:
    Type: String
    Description: "ARN of dynamodb table containing auth jwt issuers data"

  AuthJwtAttributesTableArn:
    Type: String
    Description: "ARN of dynamodb table containing auth jwt attributes data"

  JWKSCacheBucketArn:
    Type: String
    Description: "ARN of S3 bucket containing JWKS data"

  JwksDownloaderFollowRedirect:
    Type: String
    Description: "Follow redirect for jwks downloader"
    Default: "false"
  
  JwksDownloaderContentLimitBytes:
    Type: Number
    Description: "Limit of bytes for jwks downloader"
    Default: '51200'

  B2BAuthorizerRenewTimeSeconds:
    Type: Number
    Default: '180'
    Description: "JWKS renew time in seconds for b2b authorizer"
  
  B2BAuthorizerInternalCacheTtlSeconds:
    Type: Number
    Default: '600'
    Description: "Internal cache ttl in seconds for b2b authorizer"
    
  B2BAuthorizerDataPointsToAlarm:
    Type: Number
    Default: 1
    Description: "Number of data points to alarm for b2b authorizer"

  B2BAuthorizerEvaluationPeriods:
    Type: Number
    Default: 60
    Description: "Number of evaluation periods (1 minute) for b2b authorizer"

  B2BAuthorizerAlarmFilterPattern:
    Type: String
    Default: "ERROR"
    Description: "Filter pattern for b2b authorizer alarm"

  #Always JwksCacheForceRefreshLambdaTimeout+10
  B2BAuthorizerLambdaTimeout:
    Type: Number
    Default: 25
    Description: "Timeout for b2b authorizer lambda in seconds"

  B2BAuthorizerLambdaMemorySize:
    Type: Number
    Default: 128
    Description: "Memory size for b2b authorizer lambda"

  B2BAuthorizerJWTMaxAgeInSeconds:
    Type: Number
    Default: 3600
    Description: "Max age in seconds for JWT token"

  B2BAuthorizerJWTClockToleranceInSeconds:
    Type: Number
    Default: 60
    Description: "Clock skew in seconds for JWT token"

  MaxAttributeAgeDays:
    Type: Number
    Default:  90
    Description: "Max Attributes Age To request RADD Baseline"
    
  JWKSCacheRefreshDataPointsToAlarm:
    Type: Number
    Default: 1
    Description: "Number of data points to alarm for jwks cache refresh"

  JWKSCacheRefreshEvaluationPeriods:
    Type: Number
    Default: 60
    Description: "Number of evaluation periods (1 minute) for jwks cache refresh"

  JWKSCacheRefreshAlarmFilterPattern:
    Type: String
    Default: "ERROR"
    Description: "Filter pattern for jwks cache refresh alarm"
    
  JWKSCacheRefreshTimeout:
    Type: Number
    Default: 280
    Description: "Timeout for jwks cache refresh lambda in seconds"

  JWKSCacheRefreshMemorySize:
    Type: Number
    Default: 128
    Description: "Memory size for jwks cache refresh lambda"

  JwksDynamoCacheContentLimit:
    Type: Number
    Description: "Maximum Limit of jwks to save on dynamo"
    Default: '51200'

  #Can't be lower than JWKS_FORCE_REFRESH_LAMBDA_TIMEOUT_SECONDS + MAXIMUM_CLOCK_DRIFT_SEC
  JwksCacheMinimumIntervalBetweenTwoForcedRefreshSec:
    Type: Number
    Description: "Minimum interval between two forced refresh"
    Default: '120'

  MaximumClockDriftSec:
    Type: Number
    Description: "Maximum Clock drift in seconds"
    Default: '2'

  #Can't be higher than 30. Remember to modify B2BAuthorizerLambdaTimeout also
  JwksCacheForceRefreshLambdaTimeout: 
    Type: Number
    Description: "Refresh Timeout for JWKSCacheForceRefresh lambda"
    Default: '15' 

  #Value defined in https://pagopa.atlassian.net/wiki/spaces/PN/pages/1048904039/Work+Package+2+-+dettaglio+di+analisi#Vincoli-sui-timeout
  JWKSCacheForceRefreshQueueVisibilityTimeout: 
    Type: Number
    Description: "VisibilityTimeout for JWKSCacheForceRefresh queue"
    Default: '92' 

  JWKSCacheForceRefreshQueueARN:
    Type: String
    Description: 'Target queue ARN for jwks cache force refresh lambda'

  JWKSCacheForceRefreshQueueURL:
    Type: String
    Description: 'Target queue URL for jwks cache force refresh lambda'

  JWKSCacheForceRefreshQueueName:
    Type: String
    Description: 'Queue name for jwks cache force refresh lambda'

  JWKSCacheForceRefreshDataPointsToAlarm:
    Type: Number
    Default: 1
    Description: "Number of data points to alarm for jwks cache refresh"

  JWKSCacheForceRefreshEvaluationPeriods:
    Type: Number
    Default: 60
    Description: "Number of evaluation periods (1 minute) for jwks cache refresh"

  JWKSCacheForceRefreshAlarmFilterPattern:
    Type: String
    Default: "ERROR"
    Description: "Filter pattern for jwks cache refresh alarm"
  
  JWKSCacheForceRefreshDLQAlarmARN:
    Type: String
    Description: 'DLQ Alarm ARN for JWKSCacheForceRefresh-DLQ'

  JWKSCacheForceRefreshAlarmARN:
    Type: String
    Description: 'DLQ Alarm ARN for JWKSCacheForceRefresh-DLQ'

  JWKSCacheForceRefreshDLQARN:
    Type: String
    Description: 'DLQ ARN for JWKSCacheForceRefresh-DLQ'

  JwksCacheForceRefreshLambdaEventSourceMappingBatchSize:
    Type: Number
    Default: '1'
    Description: 'Batch size of JwksCacheForceRefreshLambda'

  JwksCacheForceRefreshLambdaEventSourceMappingMaximumBatchingWindowInSeconds:
    Type: Number
    Default: '0'
    Description: 'Batch windows of JwksCacheForceRefreshLambda'

  JwksCacheForceRefreshLambdaEventSourceMappingMaximumConcurrency:
    Type: Number
    Default: '4'
    Description: 'Maximum concurrency for JwksCacheForceRefreshLambda'

  JwksFollowRedirect:
    Type: String
    Default: false
    Description: Enable additional WAF Web rules
    AllowedValues:
      - true
      - false

  RedisServerlessArn:
    Type: String
    Description: 'RedisServerless ARN'
  
  RedisServerlessName:
    Type: String
    Description: 'RedisServerless Name'
  
  ElasticacheUserArn1:
    Type: String
    Description: 'ElastiCacheUser for radd'

  RedisEndpoint:
    Type: String
    Description: 'ElastiCache Redis endpoint'

  ElasticacheUserId1:
    Type: String
    Description: 'ElastiCache user id'
    
  ElasticacheSecurityGroup:
    Type: String
    Description: 'Elastic cache security Group'

  JwtIssuersManagerLambdaName:
    Type: String
    Description: 'Jwt Issuers Manager Lambda Name'
    
  JWTIssuersManagerLambdaTimeout:
    Type: Number
    Default: 20
    Description: "Timeout for JWT Issuers Manager lambda in seconds"

  JWTIssuersManagerDataPointsToAlarm:
    Type: Number
    Default: 1
    Description: "Number of data points to alarm for jwks cache refresh"

  JWTIssuersManagerEvaluationPeriods:
    Type: Number
    Default: 60
    Description: "Number of evaluation periods (1 minute) for jwks cache refresh"

  JWTIssuersManagerAlarmFilterPattern:
    Type: String
    Default: "ERROR"
    Description: "Filter pattern for jwks cache refresh alarm"

  PgCustomAttributeResolverCacheMaxUsageEpochSec:
    Type: Number
    Default: 0
    Description: "Max usage epoch in seconds for PGCUSTOME attributes resolver cache"

  PgCustomAttributeResolverEnableCache:
    Type: String
    Default: false
    Description: Enable cache for PGCUSTOM attributes resolver
    AllowedValues:
      - true
      - false

  PgEnableAccess:
    Type: String
    Default: false
    Description: Enable access to PG B2B API
    AllowedValues:
      - true
      - false

Conditions:
  HaveToDefineVpcs: !Equals ["true", !Ref PutIntoVpc]
  SendLogToKinesis: !Not [!Equals [!Ref LogsKinesisSourceStreamArn, ""]]
  HasToRefreshJWKSCache: !Not [!Equals [!Ref JWKSRefreshIntervalMinutes, 0]]

Resources:
  ###             API KEY AUTHORIZERV2 LAMBDA             ###
  #########################################################

  # Lambda function
  ApiKeyAuthorizerV2Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref ApiKeyAuthorizerV2LambdaName
      Runtime: nodejs18.x
      Handler: "index.handler"
      MemorySize: 256
      Timeout: 10
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub "${BucketBasePath}/apikeyAuthorizerV2.zip"
      Environment:
        Variables:
          CACHE_TTL: !Ref ApiKeyAuthorizerV2LambdaEnvironmentCacheTtl
          PDND_ISSUER: !Ref ApikeyAuthorizerV2PDNDIssuer
          PDND_AUDIENCE: !Ref ApikeyAuthorizerV2PDNDAudience
      Role: !GetAtt ApiKeyAuthorizerV2LambdaRole.Arn
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"

  # Lambda function role
  ApiKeyAuthorizerV2LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-ApiKeyAuthorizerV2LambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        # - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        # - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
      Path: /

  # Lambda function IAM policy
  ApiKeyAuthorizerV2LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-ApiKeyAuthorizerV2LambdaPolicy
      Roles:
        - !Ref ApiKeyAuthorizerV2LambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Sid: AllowDbQueries
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:Query"
            Resource: 
              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/pn-apiKey*
              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/pn-paAggregations
              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/pn-aggregates
          - Effect: Allow
            Sid: AllowDecrypt
            Action:
              - "kms:Decrypt"
            Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${ApiKeyTablesEncryptKeyId}

  ApiKeyAuthorizerV2LambdaAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref ApiKeyAuthorizerV2LambdaName
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn

  ###               IO AUTHORIZER LAMBDA                ###
  #########################################################

  # Lambda function
  IoAuthorizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref IoAuthorizerLambdaName
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub "${BucketBasePath}/ioAuthorizer.zip"
      Environment:
        Variables:
          CX_TAXID_HEADER: "x-pagopa-cx-taxid"
          PN_DATA_VAULT_BASEURL: http://alb.confidential.pn.internal:8080
      Role: !GetAtt IoAuthorizerLambdaRole.Arn
      VpcConfig:
        Fn::If:
          - HaveToDefineVpcs
          - SecurityGroupIds:
              - !GetAtt DataVaultServiceSecurityGroup.GroupId
            SubnetIds: !Ref SubnetsIds
          - !Ref AWS::NoValue
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
      Tags:
        - Key: "pn-eni-related"
          Value: "true"
        - Key: "pn-eni-related-groupName-regexp"
          Value: !Base64 "^pn-auth-fleet-microsvc-prod-DataVaultServiceSecurityGroup.*$"

  # Lambda function role
  IoAuthorizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-ioAuthorizerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${ProjectName}-ioAuthorizerLambdaRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLambdaToCreateLogs
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Sid: AllowLambdaToCreateLogGroup
                Action:
                  - logs:CreateLogGroup
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        # - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        # - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy

  # Data vault Service security group
  DataVaultServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: HaveToDefineVpcs
    Properties:
      GroupDescription: !Sub ${ProjectName}-data-vault-ioAuthorizer-DecGrp
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  IoAuthorizerLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref IoAuthorizerLambdaName
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn

  ###               JWT AUTHORIZER LAMBDA               ###
  #########################################################

  # Lambda function
  JwtAuthorizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref JwtAuthorizerLambdaName
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub "${BucketBasePath}/jwtAuthorizer.zip"
      Environment:
        Variables:
          CACHE_TTL: !Ref JwtAuthorizerLambdaEnvironmentCacheTtl
      Role: !GetAtt JwtAuthorizerLambdaRole.Arn
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"

  # Lambda function role
  JwtAuthorizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-jwtAuthorizerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLambdaToCreateLogs
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Sid: AllowLambdaToCreateLogGroup
                Action:
                  - logs:CreateLogGroup
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Sid: AllowKms
                Action:
                  - kms:GetPublicKey
                Effect: Allow
                Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
                Condition:
                  StringEquals:
                    'aws:ResourceTag/KeyUsageType': 'JwtSignAndVerify'
      #ManagedPolicyArns:
        # - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        # - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy

  JwtAuthorizerLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref JwtAuthorizerLambdaName
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn

  ###               B2B AUTHORIZER LAMBDA               ###
  #########################################################

  B2BAuthorizerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ProjectName}-b2b-authorizer-SecGrp
      VpcId: !Ref VpcId

  # Lambda function
  B2BAuthorizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref B2BAuthorizerLambdaName
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub "${BucketBasePath}/b2bAuthorizer.zip"
      Environment:
        Variables:
          AUTH_JWT_ISSUER_TABLE: !Ref AuthJwtIssuersTableName
          AUTH_JWT_ATTRIBUTE_TABLE: !Ref AuthJwtAttributesTableName
          FOLLOW_REDIRECT: !Ref JwksDownloaderFollowRedirect
          JWKS_CONTENT_LIMIT_BYTES: !Ref JwksDownloaderContentLimitBytes
          RENEW_TIME_SECONDS: !Ref B2BAuthorizerRenewTimeSeconds
          INTERNAL_CACHE_TTL_SECONDS: !Ref B2BAuthorizerInternalCacheTtlSeconds
          JWT_MAX_AGE_SECONDS: !Ref B2BAuthorizerJWTMaxAgeInSeconds
          JWT_CLOCK_TOLERANCE_SECONDS: !Ref B2BAuthorizerJWTClockToleranceInSeconds
          JWKS_CONTENTS: !Ref JWKSCacheBucketName
          JWKS_FORCE_REFRESH_LAMBDA_TIMEOUT_SECONDS: !Ref JwksCacheForceRefreshLambdaTimeout
          JWKS_FORCE_REFRESH_QUEUE_VISIBILITY_TIMEOUT_SECONDS: !Ref JWKSCacheForceRefreshQueueVisibilityTimeout
          JWKS_FORCE_REFRESH_QUEUE_URL: !Ref JWKSCacheForceRefreshQueueURL
          PDND_JWT_ISSUER: !Ref ApikeyAuthorizerV2PDNDIssuer
          API_PRIVATE_BASE_PATH: !Sub "http://${ApplicationLoadBalancerDomain}:8080"
          CONSENT_TYPE: !Ref ConsentTypeEnum
          PG_CUSTOM_CACHE_MAX_USAGE_EPOCH_SEC: !Ref PgCustomAttributeResolverCacheMaxUsageEpochSec
          ENABLE_PGCUSTOM_CACHE: !Ref PgCustomAttributeResolverEnableCache
          ENABLE_PG_ACCESS: !Ref PgEnableAccess
      Role: !GetAtt B2BAuthorizerLambdaRole.Arn
      Timeout: !Ref B2BAuthorizerLambdaTimeout
      MemorySize: !Ref B2BAuthorizerLambdaMemorySize
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds: 
          - !Ref B2BAuthorizerSecurityGroup
        SubnetIds: !Ref VpcEgressSubnetsIds
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"

  # Lambda function role
  B2BAuthorizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-b2bAuthorizerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLambdaToCreateLogs
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Sid: AllowLambdaToCreateLogGroup
                Action:
                  - logs:CreateLogGroup
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Sid: AllowLambdaWriteDynamoDb
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Effect: Allow
                Resource: 
                  - !Ref AuthJwtIssuersTableArn
                  - !Ref AuthJwtAttributesTableArn
              - Sid: AllowLambdaReadDynamoDb
                Action:
                  - dynamodb:Query
                  - dynamodb:GetItem
                Effect: Allow
                Resource: 
                  - !Ref AuthJwtAttributesTableArn
                  - !Ref AuthJwtIssuersTableArn
                  - !Sub ${AuthJwtIssuersTableArn}*
                  - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/pn-apiKey*
              - Sid: AllowLambdaReadS3
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Effect: Allow
                Resource:
                  - !Sub "${JWKSCacheBucketArn}/jwks_cache_entries/*"
                  - !Sub "${JWKSCacheBucketArn}/jwks_cache_entries"
                  - !Sub "arn:aws:s3:::${LambdasBucketName}/*"
              - Sid: AllowSendMessageSQS
                Action:
                  - sqs:SendMessage
                Effect: Allow
                Resource:
                  - !Ref JWKSCacheForceRefreshQueueARN
              - Effect: Allow
                Sid: AllowDecrypt
                Action:
                  - "kms:Decrypt"
                Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${ApiKeyTablesEncryptKeyId}
              - Effect: Allow
                Action:
                  - "apigateway:GET"
                Resource:
                  - !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/*"
                  - !Sub "arn:aws:apigateway:${AWS::Region}::/tags/*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        # - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        # - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy

  B2BAuthorizerLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref B2BAuthorizerLambdaName
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        DataPointsToAlarm: !Ref B2BAuthorizerDataPointsToAlarm
        EvaluationPeriods: !Ref B2BAuthorizerEvaluationPeriods
        FilterPattern: !Ref B2BAuthorizerAlarmFilterPattern

  ###             JWKS CACHE REFRESH LAMBDA             ###
  #########################################################

  # Lambda function
  JWKSCacheRefreshLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref JWKSCacheRefreshLambdaName
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub "${BucketBasePath}/jwksCacheRefreshLambda.zip"
      Role: !GetAtt JWKSCacheRefreshLambdaRole.Arn
      Timeout: !Ref JWKSCacheRefreshTimeout # less than 5 minutes event bridge period 
      TracingConfig:
        Mode: Active
      MemorySize: !Ref JWKSCacheRefreshMemorySize
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
      Environment:
        Variables:
          JWKS_REFRESH_INTERVAL_MINUTES: !Ref JWKSRefreshIntervalMinutes
          JWKS_DOWNLOAD_RETRY_INTERVAL_MINUTES: !Ref JWKSDownloadRetryIntervalMinutes
          AUTH_JWT_ISSUER_TABLE: !Ref AuthJwtIssuersTableName
          FOLLOW_REDIRECT: !Ref JwksDownloaderFollowRedirect
          JWKS_CONTENT_LIMIT_BYTES: !Ref JwksDownloaderContentLimitBytes
          JWKS_DYNAMO_CACHE_CONTENT_LIMIT: !Ref JwksDynamoCacheContentLimit
          JWKS_CONTENTS: !Ref JWKSCacheBucketName
          JWKS_FOLLOW_REDIRECT: !Ref JwksFollowRedirect
  # Lambda function role
  JWKSCacheRefreshLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-jwksCacheRefreshLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLambdaToCreateLogs
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Sid: AllowLambdaToCreateLogGroup
                Action:
                  - logs:CreateLogGroup
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Sid: AllowLambdaReadAndWriteDynamoDb
                Action:
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Effect: Allow
                Resource: 
                  - !Ref AuthJwtIssuersTableArn
                  - !Sub ${AuthJwtIssuersTableArn}*
              - Sid: AllowLambdaReadS3
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Effect: Allow
                Resource:
                  - !Sub "${JWKSCacheBucketArn}/jwks_cache_entries/*"
                  - !Sub "${JWKSCacheBucketArn}/jwks_cache_entries"
                  - !Sub "${JWKSCacheBucketArn}/jwks_sources/*"
                  - !Sub "${JWKSCacheBucketArn}/jwks_sources"
                  - !Sub "${JWKSCacheBucketArn}/jwks_b2bdest_sources/*"
                  - !Sub "${JWKSCacheBucketArn}/jwks_b2bdest_sources"
              - Sid: AllowLambdaWriteS3
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectTagging"
                Effect: Allow
                Resource:
                  - !Sub "${JWKSCacheBucketArn}/jwks_cache_entries/*"
                  - !Sub "${JWKSCacheBucketArn}/jwks_cache_entries"
                  - !Sub "${JWKSCacheBucketArn}/jwks_b2bdest_sources/*"
                  - !Sub "${JWKSCacheBucketArn}/jwks_b2bdest_sources"
      #ManagedPolicyArns:
      #  - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  JWKSCacheRefreshLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref JWKSCacheRefreshLambdaName
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        DataPointsToAlarm: !Ref JWKSCacheRefreshDataPointsToAlarm
        EvaluationPeriods: !Ref JWKSCacheRefreshEvaluationPeriods
        FilterPattern: !Ref JWKSCacheRefreshAlarmFilterPattern

  ###             BACKOFFICE AUTHORIZER LAMBDA            ###
  #########################################################

  # Lambda function
  BackofficeAuthorizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref BackofficeAuthorizerLambdaName
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub "${BucketBasePath}/backofficeAuthorizer.zip"
      Environment:
        Variables:
          CACHE_TTL: !Ref BackofficeAuthorizerLambdaEnvironmentCacheTtl
          CLIENT_ID: !Ref CognitoClientId
          USER_POOL_ARN: !Ref CognitoUserPoolArn
      Role: !GetAtt BackofficeAuthorizerLambdaRole.Arn
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"

  # Lambda function role
  BackofficeAuthorizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-backofficeAuthorizerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLambdaToCreateLogs
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Sid: AllowLambdaToCreateLogGroup
                Action:
                  - logs:CreateLogGroup
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: "get-tags-from-api-key"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "apigateway:GET"
                Resource:
                  - !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/*"
                  - !Sub "arn:aws:apigateway:${AWS::Region}::/tags/*"
        - PolicyName: "lambda-s3-read-permission"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource: "arn:aws:s3:::*/*"
      #ManagedPolicyArns:
        #- arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        # - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy

  BackofficeAuthorizerLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref BackofficeAuthorizerLambdaName
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn

  ###               TOKEN EXCHANGE LAMBDA               ###
  ##########################################################

  # Lambda function
  TokenExchangeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref TokenExchangeLambdaName
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub "${BucketBasePath}/tokenExchange.zip"
      Environment:
        Variables:
          CACHE_TTL: !Ref TokenExchangeLambdaEnvironmentCacheTtl
          TOKEN_TTL: !Ref TokenExchangeLambdaEnvironmentTokenTtl
          ISSUER: !Ref TokenExchangeLambdaEnvironmentIssuer
          ALLOWED_ISSUER: !Ref TokenExchangeLambdaEnvironmentAllowedIssuer
          ALLOWED_ORIGIN: !Ref TokenExchangeLambdaEnvironmentAllowedOrigin
          ALLOWED_TAXIDS_PARAMETER: !Ref TokenExchangeLambdaEnvironmentAllowedTaxIdsParameter
          KEY_ALIAS: !Ref PnAuthFleetJwtSignKeyAlias
          JWKS_MAPPING: !Ref TokenExchangeLambdaEnvironmentJwksMapping
          ACCEPTED_AUDIENCE: !Ref TokenExchangeLambdaEnvironmentAcceptedAudience
          AUDIENCE: !Ref TokenExchangeLambdaEnvironmentAudience
          SSM_PARAMETER_STORE_TIMEOUT_MILLIS: 5000
          PN_EMD_INTEGRATION_BASEURL: !Sub "http://${ApplicationLoadBalancerDomain}:8080"
      Role: !GetAtt TokenExchangeLambdaRole.Arn
      Timeout: 10
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
        - !Sub "arn:aws:lambda:${AWS::Region}:325218067255:layer:AWS-Parameters-and-Secrets-Lambda-Extension:2"

  # Lambda function role
  TokenExchangeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-tokenExchangeLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      # ManagedPolicyArns:
        #- arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        # - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
      Path: /

  # Lambda function IAM policy
  TokenExchangeLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-tokenExchangeLambdaPolicy
      Roles:
        - !Ref TokenExchangeLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "kms:Sign"
              - "kms:DescribeKey"
            Resource: "*"
          - Sid: AllowLambdaToCreateLogs
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${TokenExchangeLambdaName}:*
          - Sid: AllowLambdaToReadParameterStore
            Action:
              - ssm:GetParameter
            Effect: Allow
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pn-auth-fleet/allowedLoginTaxids"

  TokenExchangeLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref TokenExchangeLambdaName
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn

  ###          JWKS CACHE FORCE REFRESH LAMBDA          ###
  #########################################################

  # Lambda function
  JwksCacheForceRefreshLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref JwksCacheForceRefreshLambdaName
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub "${BucketBasePath}/jwksCacheForceRefreshLambda.zip"
      Environment:
        Variables:
          JWKS_FORCE_REFRESH_LAMBDA_TIMEOUT_SECONDS: !Ref JwksCacheForceRefreshLambdaTimeout
          MAXIMUM_CLOCK_DRIFT_SEC: !Ref MaximumClockDriftSec
          MINIMUM_INTERVAL_BETWEEN_FORCED_REFRESH_SEC: !Ref JwksCacheMinimumIntervalBetweenTwoForcedRefreshSec
          REDIS_ENDPOINT: !Ref RedisEndpoint
          USER_ID_REDIS: !Ref ElasticacheUserId1
          REDIS_SERVER_NAME: !Ref RedisServerlessName
          AUTH_JWT_ISSUER_TABLE: !Ref AuthJwtIssuersTableName
          JWKS_CONTENT_LIMIT_BYTES: !Ref JwksDownloaderContentLimitBytes
          JWKS_DYNAMO_CACHE_CONTENT_LIMIT: !Ref JwksDynamoCacheContentLimit
          JWKS_CONTENTS: !Ref JWKSCacheBucketName
          JWKS_FOLLOW_REDIRECT: !Ref JwksFollowRedirect
      Role: !GetAtt JwksCacheForceRefreshLambdaRole.Arn
      ReservedConcurrentExecutions: !Ref JwksCacheForceRefreshLambdaEventSourceMappingMaximumConcurrency
      VpcConfig:
        SecurityGroupIds: 
          - !Ref ElasticacheSecurityGroup
        SubnetIds: !Ref VpcEgressSubnetsIds
      Timeout: !Ref JwksCacheForceRefreshLambdaTimeout
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"

  # Lambda function role
  JwksCacheForceRefreshLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-jwksCacheForceRefreshLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLambdaToCreateLogs
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Sid: AllowLambdaToCreateLogGroup
                Action:
                  - logs:CreateLogGroup
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Sid: AllowLambdaReadS3
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Effect: Allow
                Resource:
                  - !Sub "${JWKSCacheBucketArn}/jwks_cache_entries/*"
                  - !Sub "${JWKSCacheBucketArn}/jwks_cache_entries"
                  - !Sub "${JWKSCacheBucketArn}/jwks_sources/*"
                  - !Sub "${JWKSCacheBucketArn}/jwks_sources"
                  - !Sub "${JWKSCacheBucketArn}/jwks_b2bdest_sources/*"
                  - !Sub "${JWKSCacheBucketArn}/jwks_b2bdest_sources"
              - Sid: AllowLambdaWriteS3
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectTagging"
                Effect: Allow
                Resource:
                  - !Sub "${JWKSCacheBucketArn}/jwks_cache_entries/*"
                  - !Sub "${JWKSCacheBucketArn}/jwks_cache_entries"
                  - !Sub "${JWKSCacheBucketArn}/jwks_b2bdest_sources/*"
                  - !Sub "${JWKSCacheBucketArn}/jwks_b2bdest_sources"
              - Sid: AllowReadSQS
                Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:GetQueueUrl
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Effect: Allow
                Resource:
                  - !Ref JWKSCacheForceRefreshQueueARN
              - Sid: RedisAuth
                Action:
                  - elasticache:Connect
                Effect: Allow
                Resource:
                  - !Ref RedisServerlessArn
                  - !Ref ElasticacheUserArn1
              - Sid: AllowLambdaWriteDynamoDb
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Effect: Allow
                Resource: 
                  - !Ref AuthJwtIssuersTableArn
              - Sid: AllowLambdaReadDynamoDb
                Action:
                  - dynamodb:Query
                  - dynamodb:GetItem
                Effect: Allow
                Resource: 
                  - !Ref AuthJwtIssuersTableArn
                  - !Sub ${AuthJwtIssuersTableArn}*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      #ManagedPolicyArns:
        # - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        # - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy

  JwksCacheForceRefreshLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref JwksCacheForceRefreshLambdaName
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        DataPointsToAlarm: !Ref JWKSCacheForceRefreshDataPointsToAlarm
        EvaluationPeriods: !Ref JWKSCacheForceRefreshEvaluationPeriods
        FilterPattern: !Ref JWKSCacheForceRefreshAlarmFilterPattern

  JwksCacheForceRefreshLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !Ref JWKSCacheForceRefreshQueueARN
      BatchSize: !Sub ${JwksCacheForceRefreshLambdaEventSourceMappingBatchSize}
      MaximumBatchingWindowInSeconds: !Sub ${JwksCacheForceRefreshLambdaEventSourceMappingMaximumBatchingWindowInSeconds}
      FunctionName: !GetAtt JwksCacheForceRefreshLambda.Arn


  # PnRaddBaseliningLambdaLibrariesLayer:
  #   Type: AWS::Lambda::LayerVersion
  #   Properties:
  #     CompatibleRuntimes:
  #       - nodejs18.x
  #     Content:
  #       S3Bucket: !Ref LambdasBucketName
  #       S3Key: !Sub "${BucketBasePath}/raddBaselining_libs.zip"
  #     Description: NodeJs Libs layer
  #     LayerName: raddBaselining-libs-layer

 # Lambda function role
  PnRaddBaseliningLambdaStackRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-RaddBaseliningLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLambdaToCreateLogs
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Sid: AllowLambdaToCreateLogGroup
                Action:
                  - logs:CreateLogGroup
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Sid: AllowLambdaReadDynamoDb
                Action:
                  - dynamodb:GetItem
                Effect: Allow
                Resource: 
                  - !Ref AuthJwtAttributesTableArn
              - Sid: AllowLambdaScanDynamoDb
                Action:
                  - dynamodb:Scan
                Effect: Allow
                Resource: 
                  - !Ref AuthJwtIssuersTableArn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  PnRaddBaseliningLambdaStack:
    Type: AWS::CloudFormation::Stack
    # UpdateReplacePolicy: Retain
    # DeletionPolicy: Delete
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda.yaml"
      Parameters:
        FunctionName: !Ref PnRaddBaseliningLambdaName
        Runtime: nodejs18.x
        Handler: "index.handler"
        MemorySize: 256
        Timeout: 10
        RoleArn: !GetAtt PnRaddBaseliningLambdaStackRole.Arn
        EnvVariables:
          !Sub [
              "AUTH_JWT_ATTRIBUTE_TABLE=${auth_jwt_attribute_table}###AUTH_JWT_ISSUER_TABLE=${auth_jwt_issuer_table}###MAX_ATTRIBUTES_AGE_DAYS=${max_attribute_age_days}",
              {
                auth_jwt_attribute_table: !Ref AuthJwtAttributesTableName,
                auth_jwt_issuer_table: !Ref AuthJwtIssuersTableName,
                max_attribute_age_days: !Ref MaxAttributeAgeDays
              },
            ]
       # Layer1: !Ref PnRaddBaseliningLambdaLibrariesLayer
        FunctionBucketName: !Ref LambdasBucketName
        FunctionBucketKey: !Sub "${BucketBasePath}/raddBaselining.zip"
  
 

  # RaddBaselining scheduler BEGIN
  RaddBaseliningSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdScheduleExecutionPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt PnRaddBaseliningLambdaStack.Outputs.FunctionArn

  RaddBaseliningScheduler:
    Type: AWS::Scheduler::Schedule
    Properties:
      Description: "Schedule every day"
      FlexibleTimeWindow:
        Mode: "OFF"
      Name: "RaddBaseliningShedule"
      ScheduleExpression: "rate(1 day)"
      State: ENABLED
      Target:
        Arn: !GetAtt PnRaddBaseliningLambdaStack.Outputs.FunctionArn
        RoleArn: !GetAtt RaddBaseliningSchedulerRole.Arn
  # RaddBaselining scheduler END  
  
  # ###      SESSION TOKEN SIGNING/VALIDATION KEY PAIR      ###
  # ###########################################################
  # Application use this alias to access the public/private key pair
  PnAuthFleetJwtSignKeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: !Sub "alias/${ProjectName}-jwt-sign-key"
      TargetKeyId: !Ref PnAuthFleetJwtSignKeyId

  ###               TOKEN EXCHANGE SERVICE                ###
  ###########################################################

  # API definition
  TokenExchangeRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${ProjectName}-token-exchange-api"
      FailOnWarnings: true
      DisableExecuteApiEndpoint: true
      EndpointConfiguration:
        Types:
          - REGIONAL
  # Deployment
  TokenExchangeRestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - TokenExchangePostMethod
      - TokenExchangeOptionsMethod
    Properties:
      RestApiId: !Ref TokenExchangeRestApi

  # Stage
  TokenExchangeRestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref TokenExchangeRestApi
      StageName: unique
      TracingEnabled: true
      DeploymentId: !Ref TokenExchangeRestApiDeployment
      AccessLogSetting:
        DestinationArn: !GetAtt "TokenExchangeApiLogGroup.Arn"
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency,"xrayTraceId":"$context.xrayTraceId","errorMessage":"$context.error.message","validationError":"$context.error.validationErrorString","integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","integrationServiceStatus":"$context.integration.integrationStatus","ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent"}'
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: "true"
          DataTraceEnabled: "false"
          LoggingLevel: "INFO"

  # Log Group
  TokenExchangeApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

  # Expose API to custom domain
  APIMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: "token-exchange"
      DomainName: !Ref WebApiDnsName
      RestApiId: !Ref TokenExchangeRestApi
      Stage: !Ref TokenExchangeRestApiStage

  # Lambda access right for POST method
  TokenExchangeLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TokenExchangeLambda
      - TokenExchangeRestApi
    Properties:
      FunctionName: !Sub "${ProjectName}-tokenExchangeLambda"
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TokenExchangeRestApi}/*/POST/"

  # Session Token Body model
  TokenExchangeModel:
    Type: "AWS::ApiGateway::Model"
    Properties:
      RestApiId: !Ref TokenExchangeRestApi
      ContentType: application/json
      Description: Schema for Token Exchange body
      Name: TokenExchangeModel
      Schema:
        type: object
        required:
          - authorizationToken
        properties:
          authorizationToken:
            type: string

  # Session Token POST method
  TokenExchangePostMethod:
    DependsOn: TokenExchangeLambda
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: "Proxy to Session Token Lambda"
      RestApiId: !Ref TokenExchangeRestApi
      ResourceId: !GetAtt TokenExchangeRestApi.RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestValidatorId: !Ref TokenExchangePostMethodRequestValidator
      RequestParameters:
        "method.request.header.Origin": true
      RequestModels:
        "application/json": !Ref TokenExchangeModel
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-tokenExchangeLambda/invocations"
        PassthroughBehavior: WHEN_NO_MATCH
        ContentHandling: CONVERT_TO_TEXT
        TimeoutInMillis: 29000

  TokenExchangePostMethodRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      RestApiId: !Ref TokenExchangeRestApi
      ValidateRequestBody: true
      ValidateRequestParameters: true

  # Session Token OPTIONS method
  TokenExchangeOptionsMethod:
    DependsOn: TokenExchangeLambda
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: "Options for Session Token"
      RestApiId: !Ref TokenExchangeRestApi
      ResourceId: !GetAtt TokenExchangeRestApi.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
          ResponseModels:
            "application/json": "Empty"
      Integration:
        Type: MOCK
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""

  TokenExchangeApiSubscriptionFilter:
    Condition: SendLogToKinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt SubscriptionFilterServiceRole.Arn
      LogGroupName: !Ref TokenExchangeApiLogGroup
      FilterPattern: !Ref CloudwatchFilterPattern
      DestinationArn: !Ref LogsKinesisSourceStreamArn

  TokenExchangeApiWaf:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-waf-acl.yaml"
      Parameters:
        WAFName: !Sub "${ProjectName}-token-exchange-web"
        IntendedUsage: WEB
        APIGatewayARNs: !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${TokenExchangeRestApi}/stages/${TokenExchangeRestApiStage}"
        Limit: !Ref TokenExchangeWafLimit
        EnhancedWebSecurityEnabled: !Ref EnhancedWebSecurityEnabled

  ### IAM Role used by Subscription filters to allow read logs from Cloudwatch and send logs to Kinesis Firehose
  SubscriptionFilterServiceRole:
    Condition: SendLogToKinesis
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        - PolicyName: !Sub "${ProjectName}-auth-fleet-logs-subscription-role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - kinesis:PutRecord
                Effect: Allow
                Resource: "*"
              - Action:
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey"
                  - "kms:Decrypt"
                Effect: Allow
                Resource: "*"

  TokenExchangeAPIGatewayApiLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "oncall-${ProjectName}-token-exchange-api-LatencyAlarm"
      AlarmDescription: "CloudWatch alarm for when API Gateway latency exceeds the limit."
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 15
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 20
      Period: 60
      Threshold: !Ref TokenExchangeLatencyLimit
      TreatMissingData: notBreaching
      Namespace: "AWS/ApiGateway"
      MetricName: "Latency"
      Dimensions:
        - Name: ApiName
          Value: !Sub "${ProjectName}-token-exchange-api"
      ExtendedStatistic: "p90"

  TokenExchangeAPIGatewayApiErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-token-exchange-api-ErrorAlarm"
      AlarmDescription: "CloudWatch alarm for when API Gateway has 4xx or 5xx error."
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      Threshold: 1
      TreatMissingData: notBreaching
      Metrics:
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub ${ProjectName}-token-exchange-api
              MetricName: 4XXError
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m2
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub ${ProjectName}-token-exchange-api
              MetricName: 5XXError
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: e2
          Expression: "m1*(0.1)"
          Label: "4XXError-weight-adjust"
          ReturnData: False
        - Id: e1
          Expression: SUM([e2,m2])
          Label: !Sub "${ProjectName}-token-exchange-api-ErrorMetric"

  TokenExchangeAPIGatewayApiErrorAlarmWakeup:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "oncall-${ProjectName}-token-exchange-api-ErrorAlarm"
      AlarmDescription: "CloudWatch alarm for when API Gateway has 4xx or 5xx error."
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 7
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 10
      Threshold: 1
      TreatMissingData: notBreaching
      Metrics:
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub ${ProjectName}-token-exchange-api
              MetricName: 4XXError
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m2
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub ${ProjectName}-token-exchange-api
              MetricName: 5XXError
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m3
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${ProjectName}-token-exchange-api"
              MetricName: Count
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: e1
          Expression: IF(m3>=10 AND (m1/m3>=0.9 OR m2/m3>=0.1), 1, 0)
          Label: !Sub "${ProjectName}-token-exchange-api-ErrorMetric-OnCall"

  # Dashboard
  MicroserviceDashboard:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-cloudwatch-dashboard.yaml"
      Parameters:
        DashboardName: !Sub "${ProjectName}-auth-fleet-v2"
        LambdaArns: !Join
          - ","
          - - !GetAtt IoAuthorizerLambda.Arn
            - !GetAtt ApiKeyAuthorizerV2Lambda.Arn
            - !GetAtt JwtAuthorizerLambda.Arn
            - !GetAtt B2BAuthorizerLambda.Arn            
            - !GetAtt TokenExchangeLambda.Arn
            - !GetAtt JwksCacheForceRefreshLambda.Arn
        RestApiStageArns: !Join
          - ","
          - - !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}::/apis/${TokenExchangeRestApi}/stages/${TokenExchangeRestApiStage}"
        RestApiNames: !Join
          - ","
          - - !Ref TokenExchangeRestApiStage
        AlarmArns: !Join
          - ","
          - - !GetAtt ApiKeyAuthorizerV2LambdaAlarms.Outputs.LambdaInvocationErrorLogsMetricAlarm
            - !GetAtt IoAuthorizerLambdaAlarms.Outputs.LambdaInvocationErrorLogsMetricAlarm
            - !GetAtt JwtAuthorizerLambdaAlarms.Outputs.LambdaInvocationErrorLogsMetricAlarm
            - !GetAtt BackofficeAuthorizerLambdaAlarms.Outputs.LambdaInvocationErrorLogsMetricAlarm
            - !GetAtt B2BAuthorizerLambdaAlarms.Outputs.LambdaInvocationErrorLogsMetricAlarm
            - !GetAtt JWKSCacheRefreshLambdaAlarms.Outputs.LambdaInvocationErrorLogsMetricAlarm
            - !GetAtt TokenExchangeLambdaAlarms.Outputs.LambdaInvocationErrorLogsMetricAlarm
            - !GetAtt JwksCacheForceRefreshLambdaAlarms.Outputs.LambdaInvocationErrorLogsMetricAlarm
            - !GetAtt TokenExchangeAPIGatewayApiErrorAlarm.Arn
            - !Ref JWKSCacheForceRefreshDLQAlarmARN
            - !Ref JWKSCacheForceRefreshAlarmARN
        LogGroupsNames: !Join
          - ","
          - - !Sub "/aws/lambda/${ApiKeyAuthorizerV2LambdaName}"
            - !Sub "/aws/lambda/${IoAuthorizerLambdaName}"
            - !Sub "/aws/lambda/${JwtAuthorizerLambdaName}"
            - !Sub "/aws/lambda/${BackofficeAuthorizerLambdaName}"
            - !Sub "/aws/lambda/${JWKSCacheRefreshLambdaName}"
            - !Sub "/aws/lambda/${B2BAuthorizerLambdaName}"
            - !Sub "/aws/lambda/${TokenExchangeLambdaName}"
            - !Sub "/aws/lambda/${JwksCacheForceRefreshLambdaName}"

  # Event Bridge rule to trigger JWKSCacheRefreshLambda every JWKSCacheRefreshIntervalInMinutes minutes
  JWKSCacheRefreshEventRule:
    Type: AWS::Events::Rule
    Condition: HasToRefreshJWKSCache
    Properties:
      Description: "Rule to trigger JWKSCacheRefreshLambda every JWKSRefreshIntervalMinutes minutes"
      ScheduleExpression: !Sub "rate(${JWKSRefreshIntervalMinutes} minutes)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt JWKSCacheRefreshLambda.Arn
          Id: !Sub "${ProjectName}-JWKSCacheRefreshLambda"

  # Permission of the lambda to be invoked by event bridge rule
  JWKSCacheRefreshLambdaSchedulePermission:
    Type: AWS::Lambda::Permission
    Condition: HasToRefreshJWKSCache
    Properties:
      FunctionName: !Ref JWKSCacheRefreshLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt JWKSCacheRefreshEventRule.Arn

  ## JWT Issuers Manager Lambda
  JWTIssuersManagerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref JwtIssuersManagerLambdaName
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub "${BucketBasePath}/jwtIssuersManager.zip"
      Environment:
        Variables:
          AUTH_JWT_ISSUER_TABLE: !Ref AuthJwtIssuersTableName
          AUTH_JWT_ATTRIBUTE_TABLE: !Ref AuthJwtAttributesTableName
          JWKS_CONTENT_LIMIT_BYTES: !Ref JwksDownloaderContentLimitBytes
          JWKS_DYNAMO_CACHE_CONTENT_LIMIT: !Ref JwksDynamoCacheContentLimit
          JWKS_CONTENTS: !Ref JWKSCacheBucketName
          JWKS_FOLLOW_REDIRECT: !Ref JwksFollowRedirect
          JWKS_B2BDEST_PREFIX: 'jwks_b2bdest_sources'
      Role: !GetAtt JWTIssuersManagerLambdaRole.Arn
      Timeout: !Ref JWTIssuersManagerLambdaTimeout
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"

  # Lambda function role
  JWTIssuersManagerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-jwtIssuersManagerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLambdaToCreateLogs
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Sid: AllowLambdaToCreateLogGroup
                Action:
                  - logs:CreateLogGroup
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Sid: AllowLambdaReadS3
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Effect: Allow
                Resource:
                  - !Sub "${JWKSCacheBucketArn}/jwks_cache_entries/*"
                  - !Sub "${JWKSCacheBucketArn}/jwks_cache_entries"
                  - !Sub "${JWKSCacheBucketArn}/jwks_sources/*"
                  - !Sub "${JWKSCacheBucketArn}/jwks_sources"
                  - !Sub "${JWKSCacheBucketArn}/jwks_b2bdest_sources/*"
                  - !Sub "${JWKSCacheBucketArn}/jwks_b2bdest_sources"
              - Sid: AllowLambdaWriteS3
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectTagging"
                Effect: Allow
                Resource:
                  - !Sub "${JWKSCacheBucketArn}/jwks_b2bdest_sources/*"
                  - !Sub "${JWKSCacheBucketArn}/jwks_b2bdest_sources"
              - Sid: AllowLambdaWriteDynamoDb
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Effect: Allow
                Resource: 
                  - !Ref AuthJwtIssuersTableArn
                  - !Ref AuthJwtAttributesTableArn
              - Sid: AllowLambdaReadDynamoDb
                Action:
                  - dynamodb:Query
                  - dynamodb:GetItem
                Effect: Allow
                Resource: 
                  - !Ref AuthJwtIssuersTableArn
                  - !Sub ${AuthJwtIssuersTableArn}*
      #ManagedPolicyArns:
        # - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        # - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy

  JWTIssuersManagerLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref JWTIssuersManagerLambda
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        DataPointsToAlarm: !Ref JWTIssuersManagerDataPointsToAlarm
        EvaluationPeriods: !Ref JWTIssuersManagerEvaluationPeriods
        FilterPattern: !Ref JWTIssuersManagerAlarmFilterPattern

  # Add lambda permission to be invoked by a role of the current AWS account; the role must be specified using a condition and not as principal
  JWTIssuersManagerLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref JWTIssuersManagerLambda
      Action: lambda:InvokeFunction
      Principal: "ecs-tasks.amazonaws.com"
      SourceArn: !Sub arn:aws:iam::${AWS::AccountId}:role/pn-apikey-manager-TaskRole/*