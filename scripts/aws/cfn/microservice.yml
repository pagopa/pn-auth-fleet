AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Transform:
  - UpdateDeploymentTransform

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'
  
  LambdasBucketName:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'
  WebApiDnsName:
    Type: String
    Description: 'DNS custom domain to export token-exchange api'

  BucketBasePath:
    Type: String
    Description: 'The S3 bucket base path where lambda functions are stored'

  CognitoUserPoolArn:
    Type: String
    Default: ''
    Description: 'Cognito user pool arn'

  CognitoClientId:
    Type: String
    Default: ''
    Description: 'Cognito CognitoClientId'

  JwtAuthorizerLambdaEnvironmentCacheTtl:
    Type: String
    Description: Cryptography keys cache entry duration in seconds
  BackofficeAuthorizerLambdaEnvironmentCacheTtl:
    Type: String
    Default: "120"
    Description: Cryptography keys cache entry duration in seconds
  TokenExchangeLambdaEnvironmentCacheTtl:
    Type: String
    Description: Cryptography keys cache entry duration in seconds
  TokenExchangeLambdaEnvironmentTokenTtl:
    Type: String
    Description: Session token duration (in seconds) for "Piattaforman Notifiche" sessions.
  TokenExchangeLambdaEnvironmentIssuer:
    Type: String
    Description: Session token issuer
  TokenExchangeLambdaEnvironmentAllowedIssuer:
    Type: String
    Description: 'Comma separated list of external authentication token issuers 
                  recognized by Piattaforma Notifiche (SelfCare and SpidHub)'
  TokenExchangeLambdaEnvironmentAllowedOrigin:
    Type: String
    Description: 'Comma separated list of websites allowed to use "Piattaforma 
                 Notifiche" back-ends API'
  TokenExchangeLambdaEnvironmentAllowedTaxIdsParameter:
    Type: String
    Description: 'Parameter of allowed login Tax Ids'
    Default: '/pn-auth-fleet/allowedLoginTaxids'
                 
  TokenExchangeLambdaEnvironmentJwksMapping:
    Type: String
    Description: 'Mapping tra issuer e jwks url non standard in formato json'

  TokenExchangeLambdaEnvironmentAcceptedAudience:
    Type: String
    Description: Comma separated list of token audience accepted

  TokenExchangeLambdaEnvironmentAudience:
    Type: String
    Description: Audience value for token generation

  TokenExchangeLatencyLimit: 
    Type: Number
    Default: 1000
    Description: Default latency limit for token exchange api

  ApplicationLoadBalancerDomain:
    Type: String
    Description: application loadbalancer used from ioAuthorizer to call pn-data-vault

  # Unused but required by CD pipeline
  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'
  # Unused but required by CD pipeline
  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  #SNS Topic Alarm Arn and Name
  AlarmSNSTopicArn:
    Type: String
    Description: "An ARN of an SNS topic where to send alarm when log line includes ERROR or FATAL" 
  
  Version:
    Type: String
    Description: "Keep versioning of commitIds used for cloudformation templates"
  
  # TODO: deploy lambda into ours VPC
  SubnetsIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'

  PutIntoVpc:
    Type: String
    Default: 'true'

  LogsKinesisSourceStreamArn:
    Type: String
    Description: 'Kinesis stream that receive logs'

  # - Log exports parameters
  CloudwatchFilterPattern:
    Default: ''
    Type: String
    Description: filter expression for exported logs

Conditions:
  HaveToDefineVpcs: !Equals [ 'true', !Ref PutIntoVpc ]
  SendLogToKinesis: !Not [ !Equals [ !Ref LogsKinesisSourceStreamArn, '' ] ]


Resources:
  ###             API KEY AUTHORIZERV2 LAMBDA             ###
  #########################################################

  # Lambda function
  ApiKeyAuthorizerV2Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-ApiKeyAuthorizerV2Lambda'
      Runtime: nodejs14.x
      Handler: 'index.handler'
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub '${BucketBasePath}/apikeyAuthorizerV2.zip'
      Role: !GetAtt ApiKeyAuthorizerV2LambdaRole.Arn
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"          

  # Lambda function role
  ApiKeyAuthorizerV2LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-ApiKeyAuthorizerV2LambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /

  # Lambda function IAM policy
  ApiKeyAuthorizerV2LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-ApiKeyAuthorizerV2LambdaPolicy
      Roles:
        - !Ref ApiKeyAuthorizerV2LambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'apigateway:*'
              - 'dynamodb:GetItem'
              - 'dynamodb:Query'
            Resource: "*"

  # lambda function Log Group
  ApiKeyAuthorizerV2LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ApiKeyAuthorizerV2Lambda}"
      RetentionInDays: 14

  # Lambda function CloudWatch Logs Metric Filter
  ApiKey2ErrorFatalLogsMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        !Ref ApiKeyAuthorizerV2LambdaLogGroup
      FilterPattern: '?ERROR ?FATAL ?CRITICAL'
      MetricTransformations:
        - MetricValue: 1
          MetricNamespace: "ErrorFatalLogs"
          MetricName: !Sub ${ProjectName}-authFleet-ApiKey2ErrorFatalMetric

  # Lambda function CloudWatch alarm
  APIKey2ErrorFatalLogsMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: ApiKey2ErrorFatalLogsMetricFilter
    Properties:
      AlarmName: !Sub ${ProjectName}-authFleet-ApiKey2ErrorFatalLogsMetricAlarm
      AlarmDescription: "CloudWatch alarm for API Key Authorizer Lambda logs with ERROR or FATAL line."
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1
      MetricName: !Sub ${ProjectName}-authFleet-ApiKey2ErrorFatalMetric
      Namespace: ErrorFatalLogs
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  ###               IO AUTHORIZER LAMBDA                ###
  #########################################################

  # Lambda function
  IoAuthorizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-ioAuthorizerLambda'
      Runtime: nodejs14.x
      Handler: 'index.handler'
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub '${BucketBasePath}/ioAuthorizer.zip'
      Environment:
        Variables:
          CX_TAXID_HEADER: 'x-pagopa-cx-taxid'
          PN_DATA_VAULT_BASEURL: http://alb.confidential.pn.internal:8080
      Role: !GetAtt IoAuthorizerLambdaRole.Arn
      VpcConfig:
        Fn::If:
          - HaveToDefineVpcs
          - SecurityGroupIds:
            - !GetAtt DataVaultServiceSecurityGroup.GroupId
            SubnetIds: !Ref SubnetsIds
          - !Ref AWS::NoValue
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"          
      
  # Lambda function role
  IoAuthorizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-ioAuthorizerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${ProjectName}-ioAuthorizerLambdaRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - '*'
                Resource: "*"
              - Sid: AllowLambdaToCreateLogs
                Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Sid: AllowLambdaToCreateLogGroup
                Action:
                - logs:CreateLogGroup
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  # Data vault Service security group
  DataVaultServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: HaveToDefineVpcs
    Properties:
      GroupDescription: !Sub ${ProjectName}-data-vault-ioAuthorizer-DecGrp
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0    

  # lambda function Log Group
  IoAuthorizerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${IoAuthorizerLambda}"
      RetentionInDays: 14

  # Lambda function CloudWatch Logs Metric Filter
  IoAuthorizerErrorFatalLogsMetricFilter: 
    Type: AWS::Logs::MetricFilter
    Properties: 
      LogGroupName: 
        !Ref IoAuthorizerLambdaLogGroup
      FilterPattern: '?ERROR ?FATAL ?CRITICAL'
      MetricTransformations: 
        - MetricValue: 1
          MetricNamespace: "ErrorFatalLogs"
          MetricName: !Sub ${ProjectName}-authFleet-IoAuthorizerErrorFatalMetric
  
  # Lambda function CloudWatch alarm 
  IoAuthorizerErrorFatalLogsMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: IoAuthorizerErrorFatalLogsMetricFilter
    Properties:
      AlarmName: !Sub ${ProjectName}-authFleet-IoAuthorizerErrorFatalLogsMetricAlarm
      AlarmDescription: "CloudWatch alarm for IO Authorizer Lambda logs with ERROR or FATAL line."
      AlarmActions: 
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1
      MetricName: !Sub ${ProjectName}-authFleet-IoAuthorizerErrorFatalMetric
      Namespace: ErrorFatalLogs
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  ###               JWT AUTHORIZER LAMBDA               ###
  #########################################################
  
  # Lambda function
  JwtAuthorizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-jwtAuthorizerLambda'
      Runtime: nodejs14.x
      Handler: 'index.handler'
      Code: 
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub '${BucketBasePath}/jwtAuthorizer.zip'
      Environment:
        Variables:
          CACHE_TTL: !Ref JwtAuthorizerLambdaEnvironmentCacheTtl
      Role: !GetAtt JwtAuthorizerLambdaRole.Arn
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"          

  # Lambda function role
  JwtAuthorizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-jwtAuthorizerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - '*'
                Resource: "*"
              - Sid: AllowLambdaToCreateLogs
                Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Sid: AllowLambdaToCreateLogGroup
                Action:
                - logs:CreateLogGroup
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  # lambda function Log Group
  JwtAuthorizerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${JwtAuthorizerLambda}"
      RetentionInDays: 14

  # Lambda function CloudWatch Logs Metric Filter
  JwtAuthorizerErrorFatalLogsMetricFilter: 
    Type: AWS::Logs::MetricFilter
    Properties: 
      LogGroupName: 
        !Ref JwtAuthorizerLambdaLogGroup
      FilterPattern: '?ERROR ?FATAL ?CRITICAL'
      MetricTransformations: 
        - MetricValue: 1
          MetricNamespace: "ErrorFatalLogs"
          MetricName: !Sub ${ProjectName}-authFleet-JwtAuthorizerErrorFatalMetric
  
  # Lambda function CloudWatch alarm 
  JwtAuthorizerErrorFatalLogsMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: JwtAuthorizerErrorFatalLogsMetricFilter
    Properties:
      AlarmName: !Sub ${ProjectName}-authFleet-JwtAuthorizerErrorFatalLogsMetricAlarm
      AlarmDescription: "CloudWatch alarm for JWT Authorizer Lambda logs with ERROR or FATAL line."
      AlarmActions: 
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1
      MetricName: !Sub ${ProjectName}-authFleet-JwtAuthorizerErrorFatalMetric
      Namespace: ErrorFatalLogs
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  ###             BACKOFFICE AUTHORIZER LAMBDA            ###
  #########################################################
  
  # Lambda function
  BackofficeAuthorizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-backofficeAuthorizerLambda'
      Runtime: nodejs18.x
      Handler: 'index.handler'
      Code: 
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub '${BucketBasePath}/backofficeAuthorizer.zip'
      Environment:
        Variables:
          CACHE_TTL: !Ref BackofficeAuthorizerLambdaEnvironmentCacheTtl
          CLIENT_ID: !Ref CognitoClientId
          USER_POOL_ARN: !Ref CognitoUserPoolArn
      Role: !GetAtt BackofficeAuthorizerLambdaRole.Arn
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"          

  # Lambda function role
  BackofficeAuthorizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-backofficeAuthorizerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLambdaToCreateLogs
                Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Sid: AllowLambdaToCreateLogGroup
                Action:
                - logs:CreateLogGroup
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: "get-tags-from-api-key"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "apigateway:GET"
                Resource: !Sub "arn:aws:apigateway:${AWS::Region}::/tags/*"
        - PolicyName: "lambda-s3-read-permission"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  -  "s3:GetObject"
                Resource: "arn:aws:s3:::*/*"    

  # lambda function Log Group
  BackofficeAuthorizerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${BackofficeAuthorizerLambda}"
      RetentionInDays: 14

  # Lambda function CloudWatch Logs Metric Filter
  BackofficeAuthorizerErrorFatalLogsMetricFilter: 
    Type: AWS::Logs::MetricFilter
    Properties: 
      LogGroupName: 
        !Ref BackofficeAuthorizerLambdaLogGroup
      FilterPattern: '?ERROR ?FATAL ?CRITICAL'
      MetricTransformations: 
        - MetricValue: 1
          MetricNamespace: "ErrorFatalLogs"
          MetricName: !Sub ${ProjectName}-authFleet-BackofficeAuthorizerErrorFatalMetric
  
  # Lambda function CloudWatch alarm 
  BackofficeAuthorizerErrorFatalLogsMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: BackofficeAuthorizerErrorFatalLogsMetricFilter
    Properties:
      AlarmName: !Sub ${ProjectName}-authFleet-BackofficeAuthorizerErrorFatalLogsMetricAlarm
      AlarmDescription: "CloudWatch alarm for Backoffice Cognito Authorizer Lambda logs with ERROR or FATAL line."
      AlarmActions: 
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1
      MetricName: !Sub ${ProjectName}-authFleet-BackofficeAuthorizerErrorFatalMetric
      Namespace: ErrorFatalLogs
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  ###               TOKEN EXCHANGE LAMBDA               ###
  ##########################################################
  
  # Lambda function
  TokenExchangeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-tokenExchangeLambda'
      Runtime: nodejs14.x
      Handler: 'index.handler'
      Code: 
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub '${BucketBasePath}/tokenExchange.zip'
      Environment:
        Variables:
          CACHE_TTL: !Ref TokenExchangeLambdaEnvironmentCacheTtl
          TOKEN_TTL: !Ref TokenExchangeLambdaEnvironmentTokenTtl
          ISSUER: !Ref TokenExchangeLambdaEnvironmentIssuer
          ALLOWED_ISSUER: !Ref TokenExchangeLambdaEnvironmentAllowedIssuer
          ALLOWED_ORIGIN: !Ref TokenExchangeLambdaEnvironmentAllowedOrigin
          ALLOWED_TAXIDS_PARAMETER: !Ref TokenExchangeLambdaEnvironmentAllowedTaxIdsParameter
          KEY_ALIAS: !Ref PnAuthFleetJwtSignKeyAlias
          JWKS_MAPPING: !Ref TokenExchangeLambdaEnvironmentJwksMapping
          ACCEPTED_AUDIENCE: !Ref TokenExchangeLambdaEnvironmentAcceptedAudience
          AUDIENCE: !Ref TokenExchangeLambdaEnvironmentAudience
      Role: !GetAtt TokenExchangeLambdaRole.Arn
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
        - !Sub "arn:aws:lambda:${AWS::Region}:325218067255:layer:AWS-Parameters-and-Secrets-Lambda-Extension:2"         

  # Lambda function role
  TokenExchangeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-tokenExchangeLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  # Lambda function IAM policy
  TokenExchangeLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-tokenExchangeLambdaPolicy
      Roles:
        - !Ref TokenExchangeLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - '*'
            Resource: "*"
          - Sid: AllowLambdaToCreateLogs
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: !GetAtt TokenExchangeLambdaLogGroup.Arn
          - Sid: AllowLambdaToReadParameterStore
            Action:
              - ssm:GetParameter
            Effect: Allow
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pn-auth-fleet/allowedLoginTaxids"

  # lambda function Log Group
  TokenExchangeLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TokenExchangeLambda}"
      RetentionInDays: 14

  # Lambda function CloudWatch Logs Metric Filter
  TokenExchangeErrorFatalLogsMetricFilter: 
    Type: AWS::Logs::MetricFilter
    Properties: 
      LogGroupName: 
        !Ref TokenExchangeLambdaLogGroup
      FilterPattern: '?ERROR ?FATAL ?CRITICAL'
      MetricTransformations: 
        - MetricValue: 1
          MetricNamespace: "ErrorFatalLogs"
          MetricName: !Sub ${ProjectName}-authFleet-TokenExchangeErrorFatalMetric
  
  # Lambda function CloudWatch alarm 
  TokenExchangeErrorFatalLogsMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: TokenExchangeErrorFatalLogsMetricFilter
    Properties:
      AlarmName: !Sub ${ProjectName}-authFleet-TokenExchangeErrorFatalLogsMetricAlarm
      AlarmDescription: "CloudWatch alarm for Token exchange Lambda logs with ERROR or FATAL line."
      AlarmActions: 
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1
      MetricName: !Sub ${ProjectName}-authFleet-TokenExchangeErrorFatalMetric
      Namespace: ErrorFatalLogs
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  # ###      SESSION TOKEN SIGNING/VALIDATION KEY PAIR      ###
  # ###########################################################
  PnAuthFleetJwtSignKey:
    Type: 'AWS::KMS::Key'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: RSA-2048 key to generate session token
      KeySpec: RSA_2048
      KeyUsage: SIGN_VERIFY
      PendingWindowInDays: 7
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
  
  # Application use this alias to access the public/private key pair
  PnAuthFleetJwtSignKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${ProjectName}-jwt-sign-key'
      TargetKeyId: !Ref PnAuthFleetJwtSignKey
  
  
  ###               TOKEN EXCHANGE SERVICE                ###
  ###########################################################
  
  # API definition
  TokenExchangeRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-token-exchange-api'
      FailOnWarnings: true
      DisableExecuteApiEndpoint: true
      EndpointConfiguration:
        Types:
          - REGIONAL
  # Deployment
  TokenExchangeRestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - TokenExchangePostMethod
      - TokenExchangeOptionsMethod
    Properties:
      RestApiId: !Ref TokenExchangeRestApi

  # Stage
  TokenExchangeRestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref TokenExchangeRestApi
      StageName: unique
      TracingEnabled: true
      DeploymentId: !Ref TokenExchangeRestApiDeployment
      AccessLogSetting:
        DestinationArn: !GetAtt "TokenExchangeApiLogGroup.Arn"
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency,"xrayTraceId":"$context.xrayTraceId","errorMessage":"$context.error.message","validationError":"$context.error.validationErrorString","integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","integrationServiceStatus":"$context.integration.integrationStatus","ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent"}'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          MetricsEnabled: 'true'
          DataTraceEnabled: 'false'

  # Log Group
  TokenExchangeApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

  # Expose API to custom domain
  APIMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: 'token-exchange'
      DomainName: !Ref WebApiDnsName
      RestApiId: !Ref TokenExchangeRestApi
      Stage: !Ref TokenExchangeRestApiStage

  # Lambda access right for POST method
  TokenExchangeLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: 
      - TokenExchangeLambda
      - TokenExchangeRestApi
    Properties:
      FunctionName: !Sub '${ProjectName}-tokenExchangeLambda'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TokenExchangeRestApi}/*/POST/'

  # Session Token Body model
  TokenExchangeModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      RestApiId: !Ref TokenExchangeRestApi
      ContentType: application/json
      Description: Schema for Token Exchange body
      Name: TokenExchangeModel
      Schema:
        type: object
        required:
          - authorizationToken
        properties:
          authorizationToken:
            type: string

  # Session Token POST method
  TokenExchangePostMethod:
    DependsOn: TokenExchangeLambda
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: 'Proxy to Session Token Lambda'
      RestApiId: !Ref TokenExchangeRestApi
      ResourceId: !GetAtt TokenExchangeRestApi.RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestValidatorId: !Ref TokenExchangePostMethodRequestValidator
      RequestParameters: 
        "method.request.header.Origin": true
      RequestModels:
         "application/json": !Ref TokenExchangeModel 
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-tokenExchangeLambda/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        ContentHandling: CONVERT_TO_TEXT
        TimeoutInMillis: 29000

  TokenExchangePostMethodRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      RestApiId: !Ref TokenExchangeRestApi
      ValidateRequestBody: true
      ValidateRequestParameters: true

  # Session Token OPTIONS method
  TokenExchangeOptionsMethod:
    DependsOn: TokenExchangeLambda
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: 'Options for Session Token'
      RestApiId: !Ref TokenExchangeRestApi
      ResourceId: !GetAtt TokenExchangeRestApi.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      MethodResponses: 
        - StatusCode: 200
          ResponseParameters: 
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
          ResponseModels:
            "application/json": "Empty"
      Integration:
        Type: MOCK
        RequestTemplates: 
          "application/json": "{\"statusCode\": 200}"
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""

  ApiKeyAuthorizerV2SubscriptionFilter:
    Condition: SendLogToKinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt SubscriptionFilterServiceRole.Arn
      LogGroupName: !Ref ApiKeyAuthorizerV2LambdaLogGroup
      FilterPattern: !Ref CloudwatchFilterPattern
      DestinationArn: !Ref LogsKinesisSourceStreamArn

  IoAuthorizerSubscriptionFilter:
    Condition: SendLogToKinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt SubscriptionFilterServiceRole.Arn
      LogGroupName: !Ref IoAuthorizerLambdaLogGroup
      FilterPattern: !Ref CloudwatchFilterPattern
      DestinationArn: !Ref LogsKinesisSourceStreamArn

  JwtAuthorizerSubscriptionFilter:
    Condition: SendLogToKinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt SubscriptionFilterServiceRole.Arn
      LogGroupName: !Ref JwtAuthorizerLambdaLogGroup
      FilterPattern: !Ref CloudwatchFilterPattern
      DestinationArn: !Ref LogsKinesisSourceStreamArn

  TokenExchangeSubscriptionFilter:
    Condition: SendLogToKinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt SubscriptionFilterServiceRole.Arn
      LogGroupName: !Ref TokenExchangeLambdaLogGroup
      FilterPattern: !Ref CloudwatchFilterPattern
      DestinationArn: !Ref LogsKinesisSourceStreamArn

  TokenExchangeApiSubscriptionFilter:
    Condition: SendLogToKinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt SubscriptionFilterServiceRole.Arn
      LogGroupName: !Ref TokenExchangeApiLogGroup
      FilterPattern: !Ref CloudwatchFilterPattern
      DestinationArn: !Ref LogsKinesisSourceStreamArn

  ### IAM Role used by Subscription filters to allow read logs from Cloudwatch and send logs to Kinesis Firehose
  SubscriptionFilterServiceRole:
    Condition: SendLogToKinesis
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        -
          PolicyName: !Sub '${ProjectName}-auth-fleet-logs-subscription-role'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - kinesis:PutRecord
                Effect: Allow
                Resource: "*"
              - Action:
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey"
                  - "kms:Decrypt"
                Effect: Allow
                Resource: "*"

  TokenExchangeAPIGatewayApiLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-token-exchange-api-LatencyAlarm"
      AlarmDescription: "CloudWatch alarm for when API Gateway latency exceeds the limit."
      AlarmActions: 
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 3
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      Period: 60
      Threshold: !Ref TokenExchangeLatencyLimit
      TreatMissingData: notBreaching
      Namespace: "AWS/ApiGateway"
      MetricName: "Latency"
      Dimensions:
        - Name: ApiName
          Value: !Sub '${ProjectName}-token-exchange-api'
      ExtendedStatistic: "p95"

  TokenExchangeAPIGatewayApiErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-token-exchange-api-ErrorAlarm"
      AlarmDescription: "CloudWatch alarm for when API Gateway has 4xx or 5xx error."
      AlarmActions: 
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      Threshold: 1
      TreatMissingData: notBreaching
      Metrics:
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub ${ProjectName}-token-exchange-api
              MetricName: 4XXError
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m2
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub ${ProjectName}-token-exchange-api
              MetricName: 5XXError
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: e1
          Expression: SUM([m1,m2])
          Label: !Sub "${ProjectName}-token-exchange-api-ErrorMetric"

  # Dashboard
  MicroserviceDashboard:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-cloudwatch-dashboard.yaml"
      Parameters:
        DashboardName: !Sub "${ProjectName}-auth-fleet-v2"
        LambdaArns: !Join 
          - ','
          - - !GetAtt IoAuthorizerLambda.Arn
            - !GetAtt ApiKeyAuthorizerV2Lambda.Arn          
            - !GetAtt JwtAuthorizerLambda.Arn          
            - !GetAtt TokenExchangeLambda.Arn                      
        RestApiStageArns: !Join
          - ','
          - - !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}::/apis/${TokenExchangeRestApi}/stages/${TokenExchangeRestApiStage}"
        RestApiNames: !Join
          - ','
          - - !Ref TokenExchangeRestApiStage
        AlarmArns: !Join
          - ','
          - - !Sub "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${IoAuthorizerErrorFatalLogsMetricAlarm}"
            - !Sub "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${APIKey2ErrorFatalLogsMetricAlarm}"
            - !Sub "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${JwtAuthorizerErrorFatalLogsMetricAlarm}"
            - !Sub "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${TokenExchangeErrorFatalLogsMetricAlarm}"
            - !GetAtt TokenExchangeAPIGatewayApiLatencyAlarm.Arn
            - !GetAtt TokenExchangeAPIGatewayApiErrorAlarm.Arn
        LogGroupsNames: !Join
          - ','
          - - !Ref ApiKeyAuthorizerV2LambdaLogGroup
            - !Ref IoAuthorizerLambdaLogGroup
            - !Ref JwtAuthorizerLambdaLogGroup
            - !Ref BackofficeAuthorizerLambdaLogGroup
            - !Ref TokenExchangeLambdaLogGroup
            - !Ref TokenExchangeApiLogGroup